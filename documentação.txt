Respositório do curso:
https://github.com/cod3rcursos/web-moderno

Aprendar com erro dos outros(Stack Over Flow)

*************** ATALHOS *****************
ctrl + alt + n > Executa código
ctrl + / > Transforma linhas selecionadas em comentários
alt + shift + seta para baixo > replica a linha atual para baixo
ctrl + x > Exclui linha
shift + alt + F > Faz identação automatica

String:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String
https://www.w3schools.com/js/js_string_methods.asp,
https://www.w3schools.com/JsrEF/jsref_charcodeat.asp

Template string:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
https://www.w3schools.com/js/js_string_templates.asp

Boolean:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean
https://www.w3schools.com/js/js_booleans.asp


[] > Array
{} > Object

Array:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array
https://www.w3schools.com/js/js_arrays.asp

Object:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
https://www.w3schools.com/js/js_objects.asp

Null e undefined:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/null
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined
https://www.w3schools.com/jsref/jsref_undefined.asp

Função:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Functions
https://www.w3schools.com/js/js_functions.asp

Var:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/var
https://www.w3schools.com/js/js_variables.asp

Var tem escopo global e escopo de função.

Let:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/let
https://www.w3schools.com/js/js_let.asp

Let é de escopo local.
Em caso de let com o mesmo nome, o bloco de menor relevancia tem preferencia.

Hoisting:
https://developer.mozilla.org/pt-BR/docs/Glossary/Hoisting
https://www.w3schools.com/js/js_hoisting.asp
https://www.youtube.com/watch?v=A9RwfhYjabw&t=1s (Cod3r)

Função vs Objeto:
new operator (Operador 'new'):
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/new

Notação ponto:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Property_accessors
https://pt.stackoverflow.com/questions/463578/aceder-a-propriedades-em-javascript-nota%C3%A7%C3%A3o-de-ponto-ou-colchetes
https://www.freecodecamp.org/portuguese/news/tutorial-sobre-chaves-em-objetos-do-javascript-como-usar-um-par-chave-valor-em-js/

Operadores de atribuição:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operador_atribuicao

'=', '+=', '-=', '*=', '/=', '%='

Operadores Destructuring(Desestruturação):
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
https://www.w3schools.com/js/js_destructuring.asp
https://chatgpt.com/share/66f40bc5-5c84-8011-82c4-77055c8512a1

O destructuring em JavaScript é uma maneira concisa de extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de uma forma mais simples e legível.

O destructuring é uma ferramenta poderosa que facilita o código ao trabalhar com arrays e objetos. Ele permite extrair dados de forma mais clara, reduzindo a necessidade de código repetitivo e tornando a leitura do código mais simples.

Operadores aritméticos:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operadores_aritmeticos

Operadores binários executam ações com dois operandos. Em uma expressão complexa, (dois ou mais operandos), a ordem de avaliação depende de regras de precedência. Operadores unários são operadores aritméticos que desempenham uma ação em um único operando.

Operadores relacionais / de comparação:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operador_virgula
https://www.w3schools.com/js/js_comparisons.asp

== 	    Igual á
=== 	Estritamente igual
!= 	    Não igual
!== 	Estritamente não igual
> 	    Maior que
< 	    Menor que
>= 	    Maior que ou igual
<= 	    Menor que ou igual

Operadores lógicos:
https://www.w3schools.com/js/js_comparisons.asp

&& > And
|| > Or
!  > 

Operador unário:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operadores_unario

++i ou --i > prefixado
i++ ou i-- > pósfixado

Operador ternário:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_operator

Funciona como uma estrutura condicional resumida (condição ? expr1 : expr2)

Tratamento de erro:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling

If e Else:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else
https://www.w3schools.com/js/js_if_else.asp

Switch:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/switch
https://www.w3schools.com/js/js_switch.asp

Laços de repetições:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration

While:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/while
https://www.w3schools.com/js/js_loop_while.asp

Do While:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while
https://www.w3schools.com/jsref/jsref_dowhile.asp

Do while é a única estruturade repetição onde a expressão é declarada no final, fazendo isso, garante que a estrutura vá rodar pelo menos uma vez, exemplo:

do {

} while (expressão)

For:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/for
https://www.w3schools.com/js/js_loop_for.asp