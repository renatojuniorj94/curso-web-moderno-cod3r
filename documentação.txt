Respositório do curso:
https://github.com/cod3rcursos/web-moderno

Aprendar com erro dos outros(Stack Over Flow)

*************** ATALHOS *****************
ctrl + alt + n > Executa código
ctrl + / > Transforma linhas selecionadas em comentários
alt + shift + seta para baixo > replica a linha atual para baixo
ctrl + x > Exclui linha
shift + alt + F > Faz identação automatica

String:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String
https://www.w3schools.com/js/js_string_methods.asp,
https://www.w3schools.com/JsrEF/jsref_charcodeat.asp

Template string:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
https://www.w3schools.com/js/js_string_templates.asp

Boolean:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean
https://www.w3schools.com/js/js_booleans.asp


[] > Array
{} > Object

Array:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array
https://www.w3schools.com/js/js_arrays.asp

Object:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
https://www.w3schools.com/js/js_objects.asp

Null e undefined:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/null
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined
https://www.w3schools.com/jsref/jsref_undefined.asp

Função:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Functions
https://www.w3schools.com/js/js_functions.asp

Var:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/var
https://www.w3schools.com/js/js_variables.asp

Var tem escopo global e escopo de função.

Let:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/let
https://www.w3schools.com/js/js_let.asp

Let é de escopo local.
Em caso de let com o mesmo nome, o bloco de menor relevancia tem preferencia.

Hoisting:
https://developer.mozilla.org/pt-BR/docs/Glossary/Hoisting
https://www.w3schools.com/js/js_hoisting.asp
https://www.youtube.com/watch?v=A9RwfhYjabw&t=1s (Cod3r)

Função vs Objeto:
new operator (Operador 'new'):
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/new

Notação ponto:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Property_accessors
https://pt.stackoverflow.com/questions/463578/aceder-a-propriedades-em-javascript-nota%C3%A7%C3%A3o-de-ponto-ou-colchetes
https://www.freecodecamp.org/portuguese/news/tutorial-sobre-chaves-em-objetos-do-javascript-como-usar-um-par-chave-valor-em-js/

Operadores de atribuição:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operador_atribuicao

'=', '+=', '-=', '*=', '/=', '%='

Operadores Destructuring(Desestruturação):
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
https://www.w3schools.com/js/js_destructuring.asp
https://chatgpt.com/share/66f40bc5-5c84-8011-82c4-77055c8512a1

O destructuring em JavaScript é uma maneira concisa de extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de uma forma mais simples e legível.

O destructuring é uma ferramenta poderosa que facilita o código ao trabalhar com arrays e objetos. Ele permite extrair dados de forma mais clara, reduzindo a necessidade de código repetitivo e tornando a leitura do código mais simples.

Operadores aritméticos:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operadores_aritmeticos

Operadores binários executam ações com dois operandos. Em uma expressão complexa, (dois ou mais operandos), a ordem de avaliação depende de regras de precedência. Operadores unários são operadores aritméticos que desempenham uma ação em um único operando.

Operadores relacionais / de comparação:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operador_virgula
https://www.w3schools.com/js/js_comparisons.asp

== 	    Igual á
=== 	Estritamente igual
!= 	    Não igual
!== 	Estritamente não igual
> 	    Maior que
< 	    Menor que
>= 	    Maior que ou igual
<= 	    Menor que ou igual

Operadores lógicos:
https://www.w3schools.com/js/js_comparisons.asp

&& > And
|| > Or
!  > 

Operador unário:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_operators#operadores_unario

++i ou --i > prefixado
i++ ou i-- > pósfixado

Operador ternário:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_operator

Funciona como uma estrutura condicional resumida (condição ? expr1 : expr2)

Tratamento de erro:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling

If e Else:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else
https://www.w3schools.com/js/js_if_else.asp

Switch:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/switch
https://www.w3schools.com/js/js_switch.asp

Laços de repetições:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration

While:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/while
https://www.w3schools.com/js/js_loop_while.asp

Do While:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while
https://www.w3schools.com/jsref/jsref_dowhile.asp

Do while é a única estruturade repetição onde a expressão é declarada no final, fazendo isso, garante que a estrutura vá rodar pelo menos uma vez, exemplo:

do {

} while (expressão)

For:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/for
https://www.w3schools.com/js/js_loop_for.asp

For in:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
https://www.w3schools.com/JS/js_loop_forin.asp

Break / Continue:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/break
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue
https://www.w3schools.com/js/js_break.asp

Arrow function:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
https://www.w3schools.com/js/js_arrow_function.asp

This:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/this
https://www.w3schools.com/js/js_this.asp

Em JavaScript, a thispalavra-chave se refere a um objeto .

Callback:
https://developer.mozilla.org/pt-BR/docs/Glossary/Callback_function
https://www.w3schools.com/js/js_callback.asp

IIFE:
https://developer.mozilla.org/pt-BR/docs/Glossary/IIFE

IIFE (Immediately Invoked Function Expression) Função auto-invocada > É uma função em JavaScript que é executada assim que definida. Esse tipo de função foge do escopo global.

Call & apply:
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/call
https://www.w3schools.com/js/js_function_call.asp
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
https://www.w3schools.com/js/js_function_apply.asp

Seletores CSS:
https://www.w3schools.com/cssref/css_selectors.php
https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_selectors

* (Universal)
nome do elemento
.class
#id
[atributo]
:pseudo-classe
::pseudo-elemento

Combinar seletores:
div + p (adjacente sibling)
div ~ p (general sibling)
div > p (child)
div + p (ddescendant)

Especificidade CSS:
https://developer.mozilla.org/pt-BR/docs/Web/CSS/CSS_cascade/Specificity

Display CSS:
https://www.w3schools.com/cssref/pr_class_display.php
https://developer.mozilla.org/pt-BR/docs/Web/CSS/display

Valores:
block;
inline;
inline-block;

Unidades CSS:
https://www.w3schools.com/cssref/css_units.php

Absolutos:
px
cm
mm

Relativas:

- Viewport
vh
vw
vmin
vmax

- font
rem 
em

Flex box:
Flex container (Tudo que marcamos como "display: flex;")

                       Cross Axis (vertical)
                            ↑
                            │
                            │
   Cross Size               │
        ↕                  │
   ┌───────────────────────────────────────────┐
   │                                           │
   │  ┌────────┐ ┌────────┐ ┌────────┐         │
   │  │  item  │ │  item  │ │  item  │         │
   │  └────────┘ └────────┘ └────────┘         │
   │                                           │
   └───────────────────────────────────────────┘
        ←──────────── Main Axis ────────────→
                   ↔
                Main Size

Legenda:
Main Axis: Direção principal dos itens (horizontal por padrão).

Main Size: Comprimento total do container na direção principal.

Cross Axis: Direção perpendicular à main (vertical por padrão).

Cross Size: Altura total do container (no eixo cross).

**flex-direction: column**

                    Cross Axis (horizontal)
       ←────────────────────────────────→
                   ↔
               Cross Size
        ┌───────────────┐
        │               │
        │   Main Axis   ↓
        │   ┌────────┐  │
        │   │  item  │  │
        │   └────────┘  │
        │   ┌────────┐  │
        │   │  item  │  │
        │   └────────┘  │
        │   ┌────────┐  │
        │   │  item  │  │
        │   └────────┘  │
        │               │
        └───────────────┘
             ↑
         Main Size

Legenda adaptada:
Main Axis: Vertical, pois flex-direction: column.

Main Size: Altura total do container.

Cross Axis: Horizontal agora, perpendicular ao main.

Cross Size: Largura total do container.